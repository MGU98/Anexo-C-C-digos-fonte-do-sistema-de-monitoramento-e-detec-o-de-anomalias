
import { useState, useEffect, useRef } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import CurrentSettingsDialog from '@/components/CurrentSettingsDialog';

interface SensorData {
  timestamp: string;
  sensor_id: string;
  is_anomaly: boolean
  distance: number;
  confidence: number;
  x: number;
  y: number;
  z: number;
  current: number;
}

interface ChartDataPoint {
  time: string;
  value: number;
  timestamp: number;
}

interface CurrentSettings {
  min: number;
  max: number;
}

interface MotorChartData {
  xData: ChartDataPoint[];
  yData: ChartDataPoint[];
  zData: ChartDataPoint[];
  currentData: ChartDataPoint[];
  currentStatus: SensorData | null;
}

const Index = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [selectedMotor, setSelectedMotor] = useState<string>('');
  const [availableMotors, setAvailableMotors] = useState<string[]>([]);
  const [currentStatus, setCurrentStatus] = useState<SensorData | null>(null);
  const [xData, setXData] = useState<ChartDataPoint[]>([]);
  const [yData, setYData] = useState<ChartDataPoint[]>([]);
  const [zData, setZData] = useState<ChartDataPoint[]>([]);
  const [currentData, setCurrentData] = useState<ChartDataPoint[]>([]);
  const [allMotorData, setAllMotorData] = useState<Record<string, SensorData[]>>({});
  const [motorChartData, setMotorChartData] = useState<Record<string, MotorChartData>>({});
  const [currentSettings, setCurrentSettings] = useState<Record<string, CurrentSettings>>({});
  const [currentAlert, setCurrentAlert] = useState<string | null>(null);
  const wsRef = useRef<WebSocket | null>(null);
  const { toast } = useToast();

  const MAX_DATA_POINTS = 50;

  // Load settings from localStorage
  useEffect(() => {
    const savedSettings = localStorage.getItem('motorCurrentSettings');
    if (savedSettings) {
      try {
        setCurrentSettings(JSON.parse(savedSettings));
      } catch (error) {
        console.error('Error loading current settings:', error);
      }
    }
  }, []);

  // Save settings to localStorage
  const saveCurrentSettings = (settings: Record<string, CurrentSettings>) => {
    localStorage.setItem('motorCurrentSettings', JSON.stringify(settings));
    setCurrentSettings(settings);
  };

  const handleCurrentSettingsChange = (motorId: string, minValue: number, maxValue: number) => {
    const newSettings = {
      ...currentSettings,
      [motorId]: { min: minValue, max: maxValue }
    };
    saveCurrentSettings(newSettings);
  };

  const checkCurrentAlert = (current: number, motorId: string) => {
    const settings = currentSettings[motorId];
    if (settings && (current < settings.min || current > settings.max)) {
      const alertMessage = `Motor ${motorId}: Corrente fora do intervalo normal (${current.toFixed(3)}A)`;
      setCurrentAlert(alertMessage);
      toast({
        title: "Alerta de Corrente",
        description: alertMessage,
        variant: "destructive"
      });
    } else {
      setCurrentAlert(null);
    }
  };

  const isCurrentOutOfRange = (motorId: string) => {
    const settings = currentSettings[motorId];
    if (!settings || !currentStatus) return false;
    const current = Number(currentStatus.current);
    return current < settings.min || current > settings.max;
  };

  const addDataPoint = (
    setData: React.Dispatch<React.SetStateAction<ChartDataPoint[]>>,
    value: number,
    timestamp: string
  ) => {
    const time = new Date(timestamp).toLocaleTimeString();
    const timestampMs = new Date(timestamp).getTime();
    setData(prev => {
      const newData = [...prev, { time, value, timestamp: timestampMs }];
      return newData.slice(-MAX_DATA_POINTS);
    });
  };

  const saveMotorChartData = (motorId: string) => {
    if (!motorId) return;
    
    setMotorChartData(prev => ({
      ...prev,
      [motorId]: {
        xData: [...xData],
        yData: [...yData],
        zData: [...zData],
        currentData: [...currentData],
        currentStatus: currentStatus
      }
    }));
  };

  const loadMotorChartData = (motorId: string) => {
    const savedData = motorChartData[motorId];
    if (savedData) {
      setXData(savedData.xData);
      setYData(savedData.yData);
      setZData(savedData.zData);
      setCurrentData(savedData.currentData);
      setCurrentStatus(savedData.currentStatus);
      
      if (savedData.currentStatus) {
        checkCurrentAlert(Number(savedData.currentStatus.current), motorId);
      }
    } else {
      // Se não há dados salvos, limpar os gráficos
      setXData([]);
      setYData([]);
      setZData([]);
      setCurrentData([]);
      setCurrentStatus(null);
      setCurrentAlert(null);
    }
  };

  const loadChartFromHistory = (motorId: string) => {
    const history = allMotorData[motorId] || [];
    const tempXData: ChartDataPoint[] = [];
    const tempYData: ChartDataPoint[] = [];
    const tempZData: ChartDataPoint[] = [];
    const tempCurrentData: ChartDataPoint[] = [];
    
    history.forEach(data => {
      const time = new Date(data.timestamp).toLocaleTimeString();
      const timestampMs = new Date(data.timestamp).getTime();
      
      tempXData.push({ time, value: Number(data.x), timestamp: timestampMs });
      tempYData.push({ time, value: Number(data.y), timestamp: timestampMs });
      tempZData.push({ time, value: Number(data.z), timestamp: timestampMs });
      tempCurrentData.push({ time, value: Number(data.current), timestamp: timestampMs });
    });
    
    setXData(tempXData.slice(-MAX_DATA_POINTS));
    setYData(tempYData.slice(-MAX_DATA_POINTS));
    setZData(tempZData.slice(-MAX_DATA_POINTS));
    setCurrentData(tempCurrentData.slice(-MAX_DATA_POINTS));
    
    if (history.length > 0) {
      const lastData = history[history.length - 1];
      setCurrentStatus(lastData);
      checkCurrentAlert(Number(lastData.current), motorId);
    }
  };

  useEffect(() => {
    const connectWebSocket = () => {
      try {
        const ws = new WebSocket('ws://localhost:4242/ws');
        wsRef.current = ws;

        ws.onopen = () => {
          console.log('WebSocket conectado');
          setIsConnected(true);
          
          // Solicitar dados atuais
          if (ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ action: "get_current_data" }));
          }
        };

        ws.onmessage = (event) => {
          try {
            const data: SensorData = JSON.parse(event.data);
            console.log('Dados recebidos:', data);

            // Guardar histórico
            setAllMotorData(prev => {
              const existing = prev[data.sensor_id] || [];
              const updated = [...existing, data].slice(-MAX_DATA_POINTS);
              return { ...prev, [data.sensor_id]: updated };
            });

            setAvailableMotors(prev => {
              if (!prev.includes(data.sensor_id)) {
                const newMotors = [...prev, data.sensor_id];
                console.log('Novo motor adicionado:', data.sensor_id);
                if (prev.length === 0) {
                  setSelectedMotor(data.sensor_id);
                }
                return newMotors;
              }
              return prev;
            });

            if ((selectedMotor && data.sensor_id === selectedMotor) || (!selectedMotor && availableMotors.length === 0)) {
              setCurrentStatus(data);
              addDataPoint(setXData, Number(data.x), data.timestamp);
              addDataPoint(setYData, Number(data.y), data.timestamp);
              addDataPoint(setZData, Number(data.z), data.timestamp);
              addDataPoint(setCurrentData, Number(data.current), data.timestamp);
              
              // Check current alert for selected motor
              if (selectedMotor && data.sensor_id === selectedMotor) {
                checkCurrentAlert(Number(data.current), selectedMotor);
              }
            }
          } catch (error) {
            console.error('Erro ao processar dados:', error);
          }
        };

        ws.onclose = () => {
          console.log('WebSocket desconectado');
          setIsConnected(false);
          setTimeout(connectWebSocket, 3000);
        };

        ws.onerror = (error) => {
          console.error('Erro WebSocket:', error);
          setIsConnected(false);
        };
      } catch (error) {
        console.error('Erro ao conectar WebSocket:', error);
        setIsConnected(false);
        setTimeout(connectWebSocket, 3000);
      }
    };

    connectWebSocket();

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, []);

  const handleMotorChange = (motorId: string) => {
    console.log('Mudando para motor:', motorId);
    
    // Salvar dados do motor atual antes de trocar
    if (selectedMotor) {
      saveMotorChartData(selectedMotor);
    }
    
    setSelectedMotor(motorId);
    
    // Carregar dados do novo motor selecionado
    loadMotorChartData(motorId);
    
    // Se não há dados salvos para este motor, tentar carregar do histórico
    if (!motorChartData[motorId] && allMotorData[motorId]) {
      loadChartFromHistory(motorId);
    }
    
    // Solicitar dados históricos do motor selecionado
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ 
        action: "get_motor_data", 
        motor_id: motorId 
      }));
    }
  };

  const formatTimestamp = (timestamp: string) => {
    return new Date(timestamp).toLocaleString('pt-BR');
  };

  return (
    <div className="min-h-screen bg-gray-950 text-white p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-6">
          <h1 className="text-3xl font-bold mb-4">Dashboard de Monitoramento do Motor</h1>
          
          <div className="flex items-center gap-4 mb-4">
            <Badge variant={isConnected ? "default" : "destructive"}>
              {isConnected ? "🟢 Conectado" : "🔴 Desconectado"}
            </Badge>
            
            <div className="flex items-center gap-2">
              <span className="text-sm text-gray-400">Motor:</span>
              <Select value={selectedMotor} onValueChange={handleMotorChange}>
                <SelectTrigger className="w-48 bg-gray-800 border-gray-700">
                  <SelectValue placeholder="Selecione um motor" />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-gray-700">
                  {availableMotors.length === 0 ? (
                    <SelectItem value="no-motors" disabled className="text-gray-500">
                      Nenhum motor detectado
                    </SelectItem>
                  ) : (
                    availableMotors.map((motorId) => (
                      <SelectItem key={motorId} value={motorId} className="text-white hover:bg-gray-700">
                        {motorId}
                      </SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>
            </div>
          </div>

          {selectedMotor && (
            <div className="text-sm text-gray-400">
              Monitorando: <span className="text-white font-medium">{selectedMotor}</span>
            </div>
          )}

          {currentAlert && (
            <Alert variant="destructive" className="mt-4">
              <AlertDescription>{currentAlert}</AlertDescription>
            </Alert>
          )}
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-4 gap-6">
          {/* Coluna esquerda - Gráficos */}
          <div className="xl:col-span-3 space-y-6">
            {/* Gráficos de Vibração */}
            <div className="flex flex-col gap-4">
              {/* Gráfico de Vibração Eixo X */}
              <Card className="bg-gray-900 border-gray-800">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg text-blue-400">Vibração Eixo X</CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={200}>
                    <LineChart data={xData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                      <XAxis 
                        dataKey="time" 
                        stroke="#9CA3AF" 
                        fontSize={12}
                        tick={{ fontSize: 10 }}
                      />
                      <YAxis stroke="#9CA3AF" fontSize={12} />
                      <Tooltip 
                        contentStyle={{ 
                          backgroundColor: '#1F2937', 
                          border: '1px solid #374151',
                          borderRadius: '8px'
                        }}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="value" 
                        stroke="#60A5FA" 
                        strokeWidth={2}
                        dot={false}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Gráfico de Vibração Eixo Y */}
              <Card className="bg-gray-900 border-gray-800">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg text-green-400">Vibração Eixo Y</CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={200}>
                    <LineChart data={yData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                      <XAxis 
                        dataKey="time" 
                        stroke="#9CA3AF" 
                        fontSize={12}
                        tick={{ fontSize: 10 }}
                      />
                      <YAxis stroke="#9CA3AF" fontSize={12} />
                      <Tooltip 
                        contentStyle={{ 
                          backgroundColor: '#1F2937', 
                          border: '1px solid #374151',
                          borderRadius: '8px'
                        }}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="value" 
                        stroke="#34D399" 
                        strokeWidth={2}
                        dot={false}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Gráfico de Vibração Eixo Z */}
              <Card className="bg-gray-900 border-gray-800">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg text-purple-400">Vibração Eixo Z</CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={200}>
                    <LineChart data={zData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                      <XAxis 
                        dataKey="time" 
                        stroke="#9CA3AF" 
                        fontSize={12}
                        tick={{ fontSize: 10 }}
                      />
                      <YAxis stroke="#9CA3AF" fontSize={12} />
                      <Tooltip 
                        contentStyle={{ 
                          backgroundColor: '#1F2937', 
                          border: '1px solid #374151',
                          borderRadius: '8px'
                        }}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="value" 
                        stroke="#A78BFA" 
                        strokeWidth={2}
                        dot={false}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>

            {/* Gráfico de Corrente com ícone de configurações */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader className="pb-2 relative">
                <CardTitle className={`text-lg ${isCurrentOutOfRange(selectedMotor) ? 'text-red-400' : 'text-yellow-400'}`}>
                  Corrente Elétrica
                  {isCurrentOutOfRange(selectedMotor) && ' - FORA DO INTERVALO NORMAL'}
                </CardTitle>
                {selectedMotor && (
                  <CurrentSettingsDialog
                    motorId={selectedMotor}
                    onSettingsChange={handleCurrentSettingsChange}
                    currentSettings={currentSettings[selectedMotor]}
                  />
                )}
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={currentData}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis 
                      dataKey="time" 
                      stroke="#9CA3AF" 
                      fontSize={12}
                    />
                    <YAxis stroke="#9CA3AF" fontSize={12} />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1F2937', 
                        border: '1px solid #374151',
                        borderRadius: '8px'
                      }}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="value" 
                      stroke={isCurrentOutOfRange(selectedMotor) ? "#EF4444" : "#FBBF24"}
                      strokeWidth={2}
                      dot={false}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>

          {/* Coluna direita - Status e Informações */}
          <div className="space-y-6">
            {/* Status do Motor */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-xl">Status do Motor</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {selectedMotor ? (
                  <>
                    <div className="text-center">
                      <div className={`text-6xl mb-2 ${currentStatus?.is_anomaly ? 'text-red-500' : 'text-green-500'}`}>
                        {currentStatus?.is_anomaly ? '🔴' : '🟢'}
                      </div>
                      <Badge 
                        variant={currentStatus?.is_anomaly ? "destructive" : "default"}
                        className="text-lg px-4 py-2"
                      >
                        {currentStatus?.is_anomaly ? "Anomalia Detectada" : "Funcionamento Normal"}
                      </Badge>
                    </div>

                    <Separator className="bg-gray-700" />

                    <div className="space-y-3">
                      <div>
                        <span className="text-gray-400 text-sm">Confiança:</span>
                        <div className="text-xl font-semibold">
                          {currentStatus ? `${Number((currentStatus.confidence * 100)).toFixed(1)}%` : "N/A"}
                        </div>
                      </div>

                      <div>
                        <span className="text-gray-400 text-sm">Distância:</span>
                        <div className="text-xl font-semibold">
                          {currentStatus ? Number(currentStatus.distance).toFixed(3) : "N/A"}
                        </div>
                      </div>

                      <div>
                        <span className="text-gray-400 text-sm">Último Update:</span>
                        <div className="text-sm">
                          {currentStatus ? formatTimestamp(currentStatus.timestamp) : "N/A"}
                        </div>
                      </div>
                    </div>
                  </>
                ) : (
                  <div className="text-center text-gray-400 py-8">
                    <div className="text-4xl mb-2">⚙️</div>
                    <p>Selecione um motor para monitorar</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Valores Atuais */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle>Valores Atuais</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-gray-800 p-3 rounded-lg">
                    <div className="text-blue-400 text-sm font-medium">Eixo X</div>
                    <div className="text-lg font-semibold">
                      {currentStatus ? Number(currentStatus.x).toFixed(3) : "0.000"}
                    </div>
                  </div>
                  <div className="bg-gray-800 p-3 rounded-lg">
                    <div className="text-green-400 text-sm font-medium">Eixo Y</div>
                    <div className="text-lg font-semibold">
                      {currentStatus ? Number(currentStatus.y).toFixed(3) : "0.000"}
                    </div>
                  </div>
                  <div className="bg-gray-800 p-3 rounded-lg">
                    <div className="text-purple-400 text-sm font-medium">Eixo Z</div>
                    <div className="text-lg font-semibold">
                      {currentStatus ? Number(currentStatus.z).toFixed(3) : "0.000"}
                    </div>
                  </div>
                  <div className={`bg-gray-800 p-3 rounded-lg ${isCurrentOutOfRange(selectedMotor) ? 'ring-2 ring-red-500' : ''}`}>
                    <div className={`text-sm font-medium ${isCurrentOutOfRange(selectedMotor) ? 'text-red-400' : 'text-yellow-400'}`}>
                      Corrente
                    </div>
                    <div className="text-lg font-semibold">
                      {currentStatus ? Number(currentStatus.current).toFixed(3) : "0.000"}
                    </div>
                    {selectedMotor && currentSettings[selectedMotor] && (
                      <div className="text-xs text-gray-500 mt-1">
                        Normal: {currentSettings[selectedMotor].min.toFixed(3)} - {currentSettings[selectedMotor].max.toFixed(3)}A
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Informações de Conexão */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle>Informações</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">WebSocket:</span>
                  <span>ws://localhost:4242/ws</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Motores disponíveis:</span>
                  <span>{availableMotors.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Pontos no gráfico:</span>
                  <span>{MAX_DATA_POINTS} máximo</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Dados recebidos:</span>
                  <span>{xData.length} pontos</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Index;
